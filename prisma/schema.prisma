generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  money         Int        @default(100000)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  userClub      UserClub[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Club {
  id          String     @id @default(cuid())
  name        String
  description String
  cost        Float      @default(100000)
  hostId      String
  exterior    String
  logo        String     @default("/images/dragon2.png")
  host        Host       @relation(fields: [hostId], references: [id])
  userClub    UserClub[]
}

model UserClub {
  id              String            @id @default(cuid())
  userId          String
  clubId          String
  money           Int               @default(100000)
  popularity      Int               @default(100)
  club            Club              @relation(fields: [clubId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userClubHostess UserClubHostess[]

  @@unique([userId, clubId], name: "userId_clubId")
}

model UserClubHostess {
  id         String   @id @default(cuid())
  userClubId String
  hostessId  String
  hostess    Hostess  @relation(fields: [hostessId], references: [id], onDelete: Cascade)
  userClub   UserClub @relation(fields: [userClubId], references: [id], onDelete: Cascade)

  @@unique([userClubId, hostessId])
}

model Host {
  id      String  @id @default(cuid())
  name    String
  surname String?
  image   String
  Club    Club[]
}

model Hostess {
  id              String            @id @default(cuid())
  name            String
  surname         String?
  image           String
  attractiveness  Int               @default(1)
  cover           String
  bio             String            @default("Nothing is actually known about this hostess...")
  userClubHostess UserClubHostess[]
}

model Activity {
  id             String    @id @default(cuid())
  name           String
  description    String
  popularityGain Int       @default(1)
  cost           Float     @default(1000)
  media          String[]
  performerId    String
  performer      Performer @relation(fields: [performerId], references: [id])
}

model Performer {
  id       String     @id @default(cuid())
  name     String
  surname  String?
  image    String
  cover    String
  bio      String     @default("Nothing is really known about this performer...")
  Activity Activity[]
}
