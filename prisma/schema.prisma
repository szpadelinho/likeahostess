generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  money         Int       @default(100000)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  userClub UserClub[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Club {
  id          String @id @default(cuid())
  name        String
  description String
  cost        Float  @default(100000)
  exterior    String
  hostId      String
  host        Host   @relation(fields: [hostId], references: [id])

  userClub UserClub[]
}

model UserClub {
  id         String @id @default(cuid())
  userId     String
  clubId     String
  money      Int    @default(100000)
  popularity Int    @default(100)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade)

  userClubHostess UserClubHostess[]

  @@unique([userId, clubId])
}

model UserClubHostess {
  id         String @id @default(cuid())
  userClubId String
  hostessId  String

  userClub UserClub @relation(fields: [userClubId], references: [id], onDelete: Cascade)
  hostess  Hostess  @relation(fields: [hostessId], references: [id], onDelete: Cascade)

  @@unique([userClubId, hostessId])
}

model Host {
  id      String  @id @default(cuid())
  name    String
  surname String?
  image   String

  Club Club[]
}

model Hostess {
  id             String  @id @default(cuid())
  name           String
  surname        String?
  image          String
  attractiveness Int     @default(1)

  userClubHostess UserClubHostess[]
}

model Activity {
  id             String    @id @default(cuid())
  name           String
  description    String
  popularityGain Int       @default(1)
  cost           Float     @default(1000)
  media          String[]
  performerId    String
  performer      Performer @relation(fields: [performerId], references: [id])
}

model Performer {
  id      String  @id @default(cuid())
  name    String
  surname String?
  image   String

  Activity Activity[]
}
